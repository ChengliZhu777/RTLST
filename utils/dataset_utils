import os
import cv2
import math
import string

from PIL import ExifTags


def get_chars(latin_type, eos='EOS', padding='PAD', unknown='UNK'):
    if latin_type == 'lowercase':
        chars = list(string.digits + string.ascii_lowercase)
    elif latin_type == 'all-case':
        chars = list(string.digits + string.ascii_letters)
    elif latin_type == 'all-cases-symbols':
        chars = list(string.printable[:-6])
    else:
        raise KeyError('latin-type must be as follow: \n'
                       '1) lowercase'
                       '2) all-cases'
                       '3) all-cases-symbols')

    chars.extend([eos, padding, unknown])
    char2id, id2char = dict(zip(chars, range(len(chars)))), dict(zip(range(len(chars)), chars))
    return chars, char2id, id2char


def image2label_paths(image_paths, dataset_format='RTLSTD'):
    if dataset_format in ['RTLSTD', 'ICDAR2015']:
        sa, sb = os.sep + 'images' + os.sep, os.sep + 'labels' + os.sep
    else:
        raise KeyError(f'Error: unsupported dataset format {dataset_format}.')

    return ['txt'.join(path.replace(sa, sb, 1).rsplit(path.split('.')[-1], 1)) for path in image_paths]


def get_exif_size(image_size, image_exif):
    image_exif = {ExifTags.TAGS[k]: v for k, v in image_exif if k in ExifTags.TAGS}
    orientation = image_exif.get('Orientation', None)
    if orientation == 6 or orientation == 8:
        return image_size[1], image_size[0]

    return image_size


def get_hash(files):
    return sum(os.path.getsize(file) for file in files if os.path.isfile(file))


def random_scale(image, image_size, scale_range, aspect_range, short_size=768, patch_size=128):

    scale = (np.random.choice(scale_range) * short_size) / min(image_size)
    aspect = math.sqrt(np.random.choice(aspect_range))
    w_scale, h_scale = scale / aspect, scale * aspect

    return scale_image(image, image_size, (w_scale, h_scale), patch_size)


def scale_image(image, image_size, scale_size, patch_size=128):
    width, height = math.ceil(int(image_size[0] * scale_size[0] + 0.5) / patch_size) * patch_size, \
                    math.ceil(int(image_size[1] * scale_size[1] + 0.5) / patch_size) * patch_size

    return cv2.resize(image, dsize=(width, height))


def horizontal_flip(images, bboxes, image_width):

    for i in range(len(images)):
        images[i] = np.flip(images[i], axis=1).copy()

    bboxes[:, :, 0] = image_width - bboxes[:, :, 0] - 1

    return images, bboxes[:, [1, 0, 3, 2]]


def bboxes_rotate(bboxes, rotate_matrix):
    rotated_bboxes = []
    rotate_params = np.transpose(rotate_matrix[:, :2])
    translation_params = np.reshape(rotate_matrix[:, 2:], newshape=(1, 2))
    for i in range(len(bboxes)):
        rotated_bboxes.append(np.dot(bboxes[i], rotate_params) + translation_params)

    return rotated_bboxes


def random_rotate(images, bboxes, image_height, image_width, max_angle=10):
    angle = (random.random() * 2 - 1) * max_angle
    rotate_matrix = cv2.getRotationMatrix2D((image_width / 2, image_height / 2), angle, 1.0)
    for i in range(len(images)):
        images[i] = cv2.warpAffine(images[i], rotate_matrix, dsize=(image_width, image_height),
                                   flags=cv2.INTER_NEAREST)
    bboxes = bboxes_rotate(bboxes, rotate_matrix)
    return images, bboxes


def remove_invalid_bboxes(bboxes, words, bbox_area_percent, image_width, image_height, min_area_thresh=0.15):
    reserved_bboxes, reserved_words, reserved_bbox_area_percent = [], [], []

    for i in range(len(bboxes)):
        if np.all(bboxes[i] > 0) and np.all(bboxes[i][:, 0] < image_width - 1) and \
                np.all(bboxes[i][:, 1] < image_height - 1):

            reserved_bboxes.append(np.around(bboxes[i]).astype(int))
            reserved_words.append(words[i])
            reserved_bbox_area_percent.append(bbox_area_percent[i])
        else:
            image_poly, bbox_poly = Polygon([[0, 0], [image_width, 0], [image_width, image_height],
                                             [0, image_height]]), Polygon(bboxes[i])
            intersection = image_poly.intersection(bbox_poly)

            if not intersection.is_empty:
                if intersection.area > bbox_poly.area / bbox_area_percent[i] * min_area_thresh:
                    inter_bboxes_coors = np.array(intersection.exterior.coords) \
                        if isinstance(intersection, Polygon) else []

                    inter_bbox = inter_bboxes_coors[:-1, ]
                    inter_bbox[:, 0], inter_bbox[:, 1] = np.clip(inter_bbox[:, 0], 0, image_width - 1), \
                        np.clip(inter_bbox[:, 1], 0, image_height - 1)

                    reserved_bboxes.append(inter_bbox)
                    reserved_bbox_area_percent.append(bbox_area_percent[i] * (Polygon(inter_bbox).area / bbox_poly.area))
                    reserved_words.append(words[i])

    return reserved_bboxes, reserved_words, reserved_bbox_area_percent
